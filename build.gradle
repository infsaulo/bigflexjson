buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "pl.allegro.tech.build:axion-release-plugin:+"
    classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:+"
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'com.jfrog.bintray'

scmVersion {
	tag {
		prefix = project.name
	}
	
	repository {
		customUsername = "$System.env.AXION_RELEASE_GITHUB_TOKEN"
		customPassword = ""
		pushTagsOnly = true
	}
	
	versionCreator 'versionWithBranch'
}

project.group = "com.toolbox"
project.version = scmVersion.version

sourceCompatibility = 1.8

   configurations.all {
      resolutionStrategy {

         cacheDynamicVersionsFor 0, 'minutes'
         cacheChangingModulesFor 0, 'minutes'

         eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'slf4j-log4j12') {
               details.useTarget group: 'org.slf4j', name: 'log4j-over-slf4j', version: '+'
            }
         }
      }
   }

   repositories {
      maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
      maven { url "http://repository.apache.org/snapshots"}
      jcenter()
   }

   dependencies {

      compile 'ch.qos.logback:logback-classic:+'
      compile 'ch.qos.logback:logback-core:+'
	  compile "org.apache.beam:java-sdk-all:+"
	  compile 'com.wizzardo.tools:tools:+'
	  
      testCompile 'junit:junit:+'
      testCompile "org.mockito:mockito-core:1.+"
      
   }


   task sourcesJar(type: Jar, dependsOn: classes) {
     from sourceSets.main.allSource
     classifier = 'sources'
   }

   task javadocJar(type: Jar, dependsOn:javadoc) {
     from javadoc.destinationDir
     classifier 'javadoc'
   }
   
   publishing {
   publications {
      mavenJava( MavenPublication ) {
         from components.java

         artifact sourcesJar
         artifact javadocJar
        }
    }
}



   artifacts {
     archives sourcesJar
     archives javadocJar
   }
   
   bintray {
	user = "$System.env.BINTRAY_USER"
	key = "$System.env.BINTRAY_API_KEY"

	publications = ['mavenJava']

	pkg {
		repo = 'tools'
		name = project.name
		desc = 'BigQuery coder and TableSchema implementations from Json'
		websiteUrl = 'https://github.com/infsaulo/' + project.name
		vcsUrl = 'https://github.com/infsaulo/' + project.name
		issueTrackerUrl = 'https://github.com/infsaulo/' + project.name + '/issues'
		licenses = ["Apache-2.0"]
		publish = true
		version {
			name = project.version
			vcsTag = scmVersion.tag.prefix + '-' + project.version
			gpg {
				sign = true
				passphrase = "$System.env.BINTRAY_GPG_PASSPHRASE"
			}
		}
	}
}
  
bintrayUpload.onlyIf { !project.version.endsWith( 'SNAPSHOT' ) } 

findbugs {
	toolVersion = "+"
    reportsDir = file("$project.buildDir/findbugsReports")
    effort = "max"
    reportLevel = "low"
    ignoreFailures = false
    excludeFilter = file("${rootProject.projectDir}/findbugs-exclude.xml")
}

   pmd {
      toolVersion = "+"
      reportsDir = file("$project.buildDir/pmdReports")
      ruleSets = [
         "basic",
         "braces",
         "naming",
         "design",
         "coupling",
         "clone",
         "codesize",
         "finalizers",
         "strings",
         "typeresolution",
         "strictexception",
         "logging-java"
      ]
      ignoreFailures = false
      sourceSets = [sourceSets.main]
   }

   tasks.withType(FindBugs) {
      reports {
         xml.enabled = false
         html.enabled = true
      }
   }

   checkstyle {
      config = resources.text.fromFile("${rootProject.projectDir}/checkstyle/google_checks.xml")
      configProperties = [samedir: "${rootProject.projectDir}/checkstyle"]
      reportsDir = file("$rootProject.buildDir/checkstyleReports")
      toolVersion = "+"
      ignoreFailures = false
   }